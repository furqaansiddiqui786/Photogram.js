{"version":3,"sources":["components/Title.js","components/Photo.js","components/Photowall.js","components/AddPhoto.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","heading","Photo","post","className","src","imageLink","alt","description","onClick","onRemovePhoto","Photowall","to","class","posts","sort","x","y","id","map","index","key","AddPhoto","handlesubmit","bind","event","preventDefault","target","elements","link","value","Desc","Number","Date","this","onAddPhoto","onSubmit","type","placeholder","name","Component","App","state","removePhoto","addPhoto","postRemoved","setState","filter","postsubmit","concat","console","log","exact","path","render","history","addedPost","push","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.306241a3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Title(props){\r\n    return <h1>{props.heading}</h1>\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\n\r\nfunction Photo(props){\r\n        const post = props.post\r\n        return(\r\n            <div>\r\n\r\n            <figure className = 'figure'>\r\n\r\n                <img className = 'photo' src = {post.imageLink} alt = {post.description} />\r\n                \r\n                <figurecaption>\r\n                    <p>{post.description}</p>\r\n                </figurecaption>\r\n\r\n                <div className = 'remove-container'>\r\n                <button className = 'remove-button' onClick = {() => {\r\n                    props.onRemovePhoto(post)\r\n                }}>Remove</button>\r\n            </div>\r\n\r\n            </figure>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default Photo;","import React from 'react';\r\nimport Photo from './Photo';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Photowall(props){\r\n    return(\r\n<div>\r\n        <div className = 'AddMore-Container'>\r\n        <Link className = 'Add-Button' to = '/AddPhoto'> <i class=\"fas fa-plus-circle addpic\"></i> </Link>\r\n        </div>\r\n        <div className = 'photogrid'>\r\n            {props.posts.sort(function(x,y){\r\n                return y.id - x.id\r\n            }).map\r\n            }\r\n            {props.posts.map((post, index) => <Photo key={index} post={post} onRemovePhoto = {props.onRemovePhoto} />)}\r\n        </div>\r\n</div>\r\n    )\r\n}\r\n\r\nexport default Photowall;","import React, {Component} from 'react';\r\n\r\nclass AddPhoto extends Component{\r\n    constructor(){\r\n        super()\r\n        this.handlesubmit = this.handlesubmit.bind(this)\r\n    }\r\n\r\n\r\nhandlesubmit(event){\r\n    event.preventDefault();\r\n    const imageLink = event.target.elements.link.value\r\n    const description = event.target.elements.Desc.value\r\n\r\n    const post = {\r\n        id : Number(new Date()), description : description,\r\n        imageLink : imageLink\r\n    }\r\n    if(description && imageLink){\r\n        this.props.onAddPhoto(post)\r\n    }\r\n}\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Photogram</h1>\r\n                <div className = 'form-box'>\r\n                <form onSubmit = {this.handlesubmit}>\r\n                    <label>Add a image link</label><br />\r\n                    <input type = 'text' placeholder = \"Enter a Image Link to Grab\" name = 'link' /><br />\r\n                    <label>Add a description for the above image</label><br />\r\n                    <input type = 'text' placeholder = 'Enter Your Description Here' name = 'Desc' /><br />\r\n                    <button className = 'form-button' value = 'submit' type = 'submit'>Post</button>\r\n                </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddPhoto;","import React, {Component} from 'react';\nimport './App.css';\nimport Title from './components/Title'\nimport Photowall from './components/Photowall'\nimport {Route} from 'react-router-dom'\nimport AddPhoto from './components/AddPhoto';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      posts : [\n        {\n          id : 0,\n          description : 'admin panel sample',\n          imageLink : 'https://images.pexels.com/photos/853199/pexels-photo-853199.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        },\n        {\n          id : 1,\n          description : 'Cool dogs website',\n          imageLink : 'https://images.pexels.com/photos/2882215/pexels-photo-2882215.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        },\n        {\n          id : 2,\n          description : 'some techy stuff',\n          imageLink : 'https://images.pexels.com/photos/268533/pexels-photo-268533.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        }\n      ]\n    }\n    this.removePhoto = this.removePhoto.bind(this)\n    this.addPhoto = this.addPhoto.bind(this)\n  }\n\n\n  removePhoto(postRemoved){\n    this.setState((state) => ({posts : state.posts.filter(post => post !== postRemoved)}))\n  }\n\naddPhoto(postsubmit){\n  this.setState(state => ({posts : state.posts.concat([postsubmit])}))\n}\n\n  render() {\n    console.log(this.state.posts)\n    return ( \n    \n    <div className = 'App'>\n        <Route exact path = \"/\" render={() => (\n             <div>\n                  <Title heading={'PhotoGram'}/>\n                  <Photowall posts={this.state.posts} onRemovePhoto={this.removePhoto} />\n             </div>\n\n        )}/> \n\n        <Route path= \"/AddPhoto\" render = {({history}) => (\n            <AddPhoto onAddPhoto={(addedPost) => {\n                this.addPhoto(addedPost)\n                history.push('/')\n            }}/>\n        )}/>\n     </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}